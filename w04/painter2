package painter2;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Random;

import javax.swing.JPanel;

public class Drawpanel extends JPanel{
	
	private Shape shapes[];
	final int Max = 100;
	private int sct;
	private int x1,y1,x2,y2;
	private boolean filled;
	private Color color;
	
	private int stp;
	
	private  int numtypes = 3;
	final int rect = 1;
	final int oval = 2;
	final int vtri = 3;
	
	private int type;
	
	final int ul=1;
	final int ur=2;
	final int dl=3;
	final int dr=4;
	
	Random rand; 
	
	public Drawpanel() {
		super();
		shapes = new Shape[Max];
		rand = new Random();
		randgen(15);
		
	}

	public void randgen(int n) {
		for(int i=0;i<n;i++)
		{
			x1 = rand.nextInt(600);
			y1 = rand.nextInt(600);
			x2 = rand.nextInt(600);
			y2 = rand.nextInt(600);
			filled = rand.nextBoolean();
			color = new Color(rand.nextInt(256),rand.nextInt(256),rand.nextInt(256));
			stp = rand.nextInt(numtypes)+1;
			
			switch(stp) {
			case rect:
				shapes[sct++] = new Rect(x1,y1,x2,y2,filled,color);
				break;
			case oval:
				shapes[sct++] = new Oval(x1,y1,x2,y2,filled,color);
				break;
			case vtri:
				shapes[sct++] = new Vtri(x1,y1,x2,y2,filled,color);
				break;
			}
			
		}
	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		for(int i=0;i<sct;i++) {
			shapes[i].draw(g);
			
		}
	}


}

---------------------------------------------------
package painter2;

import java.awt.Color;
import java.awt.Graphics;

public class Oval extends Shape {

	public Oval(int x1, int y1, int x2, int y2, boolean filled, Color color) {
		super(x1, y1, x2, y2, filled, color);
		// TODO Auto-generated constructor stub
	}

	
	
	@Override
	public void draw(Graphics g) {
		// TODO Auto-generated method stub
		g.setColor(color);
		if(filled)
			g.fillOval(Math.min(x1, x2),Math.min(y1, y2),Math.abs(x1-x2),Math.abs(y1-y2));
		else
			g.drawOval(Math.min(x1, x2),Math.min(y1, y2),Math.abs(x1-x2),Math.abs(y1-y2));
	}

	@Override
	public String toString() {
		
		return "Oval [x1=" + x1 + ", y1=" + y1 + ", x2=" + x2 + ", y2=" + y2 + ", filled=" + filled + ", color=" + color
				+ "]";
	}

}

-----------------------------------------------------
package painter2;

import java.awt.Color;

import java.awt.Graphics;

public class Rect extends Shape {
	public Rect(int x1,int y1,int x2,int y2,boolean filled,Color color) {
		super(x1,y1,x2,y2,filled,color);
		
	}

	
	
	@Override
	public void draw(Graphics g) {
		// TODO Auto-generated method stub
		g.setColor(color);
		if(filled) {
			g.fillRect(Math.min(x1, x2),Math.min(y1, y2),Math.abs(x1-x2),Math.abs(y1-y2));
		}else {
				g.drawRect(Math.min(x1, x2),Math.min(y1, y2),Math.abs(x1-x2),Math.abs(y1-y2));
			}
		}

	@Override
	public String toString() {
		return "Rect [x1=" + x1 + ", y1=" + y1 + ", x2=" + x2 + ", y2=" + y2 + ", filled=" + filled + ", color=" + color
				+ "]";
	}
	}
  
  -----------------------------------------------------
  package painter2;

import java.awt.Color;
import java.awt.Graphics;

public abstract class Shape {
	protected int x1,y1,x2,y2;
	protected boolean filled;
	protected Color color;
	
	public Shape(int x1,int y1,int x2,int y2,boolean filled,Color color) {
		this.x1 = x1;
		this.y1 = y1;
		this.x2 = x2;
		this.y2 = y2;
		this.filled = filled;
		this.color = color;
		
	}
	public abstract void draw(Graphics g);
	public int getX1() {
		return x1;
	}
	public void setX1(int x1) {
		this.x1 = x1;
	}
	public int getY1() {
		return y1;
	}
	public void setY1(int y1) {
		this.y1 = y1;
	}
	public int getX2() {
		return x2;
	}
	public void setX2(int x2) {
		this.x2 = x2;
	}
	public int getY2() {
		return y2;
	}
	public void setY2(int y2) {
		this.y2 = y2;
	}
	public boolean isFilled() {
		return filled;
	}
	public void setFilled(boolean filled) {
		this.filled = filled;
	}
	public Color getColor() {
		return color;
	}
	public void setColor(Color color) {
		this.color = color;
	}

	
	
}

-------------------------------------------------------
package painter2;

import java.awt.Color;
import java.awt.Graphics;

public class Vtri extends Shape{
	
	private int type;
	
	int x;
	
	final int ul=1;
	final int ur=2;
	final int dl=3;
	final int dr=4;
	
	public Vtri(int x1, int y1, int x2, int y2, boolean filled, Color color) {
		super(x1, y1, x2, y2, filled, color);
		this.type = type;
		
		// TODO Auto-generated constructor stub
	}

	
	
	public int getType() {
		return type;
	}



	public void setType(int type) {
		this.type = type;
	}



	@Override
	public void draw(Graphics g) {
		int tx1 = Math.min(x1, x2);
		int ty1 = Math.min(y1, y2);
		int tx4 = Math.max(x1, x2);
		int ty4 = Math.max(y1, y2);
		int tx2 = tx4;
		int ty2 = ty1;
		int tx3 = tx1;
		int ty3 = ty4;
		
		int x[] = null;
		int y[] = null;
		
		switch(type) {
		case ul:
			x = new int[] {tx1,tx3,tx4};
			y = new int[] {ty1,ty3,ty4};
			break;
		case ur:
			x = new int[] {tx2,tx3,tx4};
			y = new int[] {ty2,ty3,ty4};
			break;
		case dl:
			x = new int[] {tx1,tx2,tx3};
			y = new int[] {ty1,ty2,ty3};
			break;
		case dr:
			x = new int[] {tx1,tx2,tx4};
			y = new int[] {ty1,ty3,ty4};
			break;
			
		}
		
		if(filled)
			g.fillPolygon(x, y, 3);
		else
			g.drawPolygon(x, y, 3);
	}



	@Override
	public String toString() {		
		
		return "Vtri [type=" + type + ", x=" + x + ", ul=" + ul + ", ur=" + ur + ", dl=" + dl + ", dr=" + dr + "]";
	}
	
	


}

-------------------------------------------
package painter2;

import java.awt.BorderLayout;

import javax.swing.JFrame;

public class PainterFrame extends JFrame{
	
	private Drawpanel drawpanel;


	public PainterFrame() {
		super();
		drawpanel = new Drawpanel();
		add(drawpanel, BorderLayout.CENTER);
		
	}


}

---------------------------------------------------------
package painter2;

public class ShapeTest {

	public static void main(String[] args) {

		PainterFrame pframe = new PainterFrame();
		pframe.setSize(900, 800);
		pframe.setVisible(true);

		
		
	}

}
